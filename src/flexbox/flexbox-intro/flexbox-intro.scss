@import '../../base';

/*

    THE MAIN FLEX PROPERTIES

    display: flex | inline flex
    flex-direction: row | column
    flex-wrap: wrap | nowrap | wrapreverse , default nowrap
    flex-flow: <flex-direction> <flex-wrap> , shorthand , default row nowrap
    
    justify-content: flex-start | flex-end | center | space-between | space-around
    align-items: flex-start | flex-end | center | stretch | baseline (font baseline)
    align-content: flex-start | flex-end | center | space-between | space-around (used when wrapping)
    align-self: flex-start | flex-end | center | stretch , align itself alone to the top/bottom/middle or stretch out

    flex-grow: <number> , default 0
    flex-shrink: <number> , default 1
    flex-basis: <number>px/% (the basis, width or height, before it begins to flex) , default auto (but default is 0px in IE11)
    flex: <number> <number> <number>px/% , shorthand for flex-grow, flex-shrink and flex-basis, changes size (see read me)
    It is recommended that you use this shorthand property rather than set the individual properties. The short hand sets the other values intelligently.

    order: <+-number> , change order, default is 0

*/

// EXAMPLE

@mixin flex-container-item(){
    color: map-get($ip-colors, cloud);
    border: 2px solid map-get($ip-colors, dark);
    padding: map-get($ip-gutter, md);
}

// Flex 1

.ip-flex-container-1 {
    display: flex;                              // align children on x axis, they take up full width
    align-items: center;                        // By default items have same height (stretch), but this adapts the height and aligns them to y center
    flex-direction: column;                     // default is row, this makes it column

    @include ip-mq-breakpoint-up(md) {
        flex-direction: row;
    }
}

.ip-flex-container-1-item {
    @include flex-container-item();
    background-color: map-get($ip-colors, amethyst);
    width: 100%                                  // needed for IE11 (also need box-sizing border-box in _base.scss)
}

.ip-flex-container-1-item:nth-child(1) {
    @include ip-mq-breakpoint-up(md) {
        flex:2;                                 // flex: 2 is the exact same as saying flex-grow: 2; flex-shrink: 1; flex-basis: auto
    }                                           // Also note that, if we only give one item flex, it will take up all available space
}
.ip-flex-container-1-item:nth-child(2) {
    @include ip-mq-breakpoint-up(md) {
        flex:1;
    }
}
.ip-flex-container-1-item:nth-child(3) {
    @include ip-mq-breakpoint-up(md) {
        flex:1;
    }
}

// Flex 2

.ip-flex-container-2 {
    display: flex;
    //justify-content: center;                    // flex-start is default (40% gap on the right), this centers all 3
    //justify-content: space-between;             // evenly spaced from start to end
    //justify-content: space-around;              // even space between, half space before and after
    //justify-content: space-evenly;              // equal space everywhere, not supported in chrome/IE
    flex-direction: column;

    @include ip-mq-breakpoint-up(md) {
        flex-direction: row;
    }

    @include ip-mq-breakpoint-range(md, lg){
        flex-wrap: wrap;
    }
}

.ip-flex-container-2-item {
    //@extend .ip-flex-container-1-item;                dangerous (it will extend the nth-child() above, not what we want
    @include flex-container-item();                     // a mixin will duplicate the css output, but the sass is dry
    background-color: map-get($ip-colors, sun);

    width: 100%;                                        // needed for IE11 (also need box-sizing border-box in _base.scss)

    @include ip-mq-breakpoint-up(md) { 
        //width: 20%;                                   // width work, they are all 20% wide
        flex-basis: 20%;                                // flex-basis is more "flexy" but does the same thing (in our case, see read me)
    }
}
